#include "MethodTensorflow.h"
#include "TMVA/ClassifierFactory.h"

namespace TMVA{

    void MethodTensorflow::Init(){
        // Load the graph
        Log() << kERROR << "Graph: " << fFilepathGraph << Endl;
    }

    void MethodTensorflow::Train(){
    }

    void MethodTensorflow::DeclareOptions(){
        DeclareOptionRef(fFilepathGraph="foo.pb", "FilepathGraph", "Path to file which contains the graph generated by Tensorflow");
    }

    void MethodTensorflow::ProcessOptions(){
    }

    Double_t MethodTensorflow::GetMvaValue(Double_t*, Double_t*){
        return 0;
    }

    const Ranking* MethodTensorflow::CreateRanking(){
        Log() << kWARNING << "Creating a variable ranking is not yet implemented." << Endl;
        return 0;
    }

    void MethodTensorflow::AddWeightsXMLTo(void* parent) const{
    }

    void MethodTensorflow::ReadWeightsFromXML(void* wghtnode){
    }

    void MethodTensorflow::ReadWeightsFromStream(std::istream&){
        Log() << kERROR << "Don't use this option, it's deprecated!" << Endl;
    }

    void MethodTensorflow::Register(){
        ClassifierFactory::Instance().Register("Tensorflow", CreateMethod);
        Types::Instance().AddTypeMapping(Types::kPlugins, "Tensorflow");
    }

    IMethod* MethodTensorflow::CreateMethod(const TString& job, const TString& title, DataSetInfo& datasetinfo, const TString& option){
        if(job=="" && title==""){
            return (IMethod*) new MethodTensorflow(datasetinfo, option);
        }else{
            return (IMethod*) new MethodTensorflow(job, title, datasetinfo, option);
        }
    }

    void MethodTensorflow::GetHelpMessage() const{
        // TODO: give a helpful help message
        Log() << kERROR << "The help message is not yet implemented!" << Endl;
    }

    Bool_t TMVA::MethodTensorflow::HasAnalysisType( Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets ){
        // Set analysis type to classification
        // TODO: implement multiclass
        if(type == Types::kClassification && numberClasses == 2) return kTRUE;
        else return kFALSE;
    }

} // namespace TMVA
